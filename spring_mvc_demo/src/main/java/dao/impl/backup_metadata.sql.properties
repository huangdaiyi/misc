sql.create_folder_backup_metadata = \
	INSERT INTO `backup_metadata_index` ( \
			`id`,`parent_id`,`name`,`is_folder`,`sort_priority`,`size`,`origin_name`,`modified_at`, \
			`modified_by`,`device_uid`,`link_path`,`note`,`params`,`icon_block_id`,`is_encrypted`,`created_at`,`created_by`,`block_id`,`type`, \
			`owner_id`,`original_index_id`,`backup_no`,`is_visible`) \
		SELECT :id, :parentId, :name, :folder, :sortPriority, :size , :originName, :modifiedAt, \
			:modifiedBy,:deviceUid,:fullSourcePath,:note,:params,:iconBlockId,:encrypted,:createdAt, :createdBy,:blockId,:type,:ownerId, \
			:originalIndexId,:backupNo,:visible FROM DUAL WHERE NOT EXISTS (SELECT `id` FROM backup_metadata_index a WHERE a.`original_index_id` = :originalIndexId \
			AND `is_folder` = 1);

sql.create_file_backup_metadata = \
	INSERT INTO `backup_metadata_index` ( \
			`id`,`parent_id`,`name`,`is_folder`,`sort_priority`,`size`,`origin_name`,`modified_at`, \
			`modified_by`,`device_uid`,`link_path`,`note`,`params`,`icon_block_id`,`is_encrypted`,`created_at`,`created_by`,`block_id`,`type`, \
			`owner_id`,`original_index_id`,`backup_no`,`is_visible` \
		) VALUES ( \
			:id, :parentId, :name, :folder, :sortPriority, :size , :originName, :modifiedAt, \
			:modifiedBy,:deviceUid,:fullSourcePath,:note,:params,:iconBlockId,:encrypted,:createdAt, :createdBy,:blockId,:type,:ownerId, \
			:originalIndexId,:backupNo,:visible);

sql.get_backup_by_original_id = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`original_index_id` = :originalIndexId order by m.`modified_at` desc;

sql.get_backup = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`folders_count`, mat.`files_count`, mat.`total_size`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`id` = :id;

sql.get_backup_file_by_criteria = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, bmi.`backup_no`,\
			bmi.`type`, bmi.`owner_id`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`width`, miaa.`height`, bmi.`is_visible` AS `visible`, \
			miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` bmi \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (miaa.`metadata_index_id` = bmi.`id` AND miaa.`is_backup` = 1) \
		WHERE bmi.`parent_id` = :parentId AND bmi.`name` = :name  AND bmi.`backup_no` = :backupNo \
			AND bmi.`device_uid` = :deviceUid AND bmi.`link_path` = :fullSourcePath LIMIT 1;

sql.get_backup_folder_by_criteria = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, \
			bmi.`type`, bmi.`owner_id`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`width`, miaa.`height`, bmi.`is_visible` AS `visible`, \
			miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` bmi \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (miaa.`metadata_index_id` = bmi.`id` AND miaa.`is_backup` = 1) \
		WHERE bmi.`parent_id` = :parentId AND bmi.`name` = :name \
			AND bmi.`device_uid` = :deviceUid AND bmi.`link_path` = :fullSourcePath LIMIT 1;

sql.get_backupMetdatas_by_criteria = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, \
			bmi.`type`, bmi.`owner_id`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`width`, miaa.`height`, bmi.`is_visible` AS `visible`, \
			miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` bmi \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (miaa.`metadata_index_id` = bmi.`id` AND miaa.`is_backup` = 1) \
		WHERE bmi.`parent_id` = :parentId AND bmi.`name` = :name \
			AND bmi.`device_uid` = :deviceUid AND bmi.`link_path` = :fullSourcePath;

sql.get_unbackup_metadatas_by_parent_ids = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, bmi.`type`, \
			bmi.`owner_id`, bmi.`original_index_id`, bmi.`backup_no`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`is_backup` AS `backup`, \
			miaa.`width`, miaa.`height`, bmi.`is_visible` AS `visible`, miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` bmi \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (miaa.`metadata_index_id` = bmi.`id`) \
		WHERE bmi.`parent_id` IN (:parentIds) AND bmi.`original_index_id` = '';


sql.get_backup_metadata_by_parent_id = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, bmi.`type`, \
			bmi.`owner_id`, bmi.`original_index_id`, bmi.`backup_no`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`is_backup` AS `backup`, \
			miaa.`width`, miaa.`height`, bmi.`is_visible` AS `visible`, miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` bmi \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (miaa.`metadata_index_id` = bmi.`id`) \
		WHERE bmi.`parent_id` = :parentId

sql.get_backup_parent_id = \
	SELECT `parent_id` FROM `backup_metadata_index` WHERE `id` = :id;
		
sql.get_backup_by_original_ids = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`original_index_id` IN (:originalIndexIds);

sql.modify_backup_no = \
	UPDATE `backup_metadata_index` \
		SET `name` = :name, `origin_name` = :originName, `backup_no` = :backupNo \
		WHERE `id` = :id;
	
sql.delete_backup = \
	DELETE FROM `backup_metadata_index` \
		WHERE original_index_id = :originalIndexId AND `backup_no` = :backupNo;
		
sql.delete_backup_by_original_ids = \
	DELETE FROM `backup_metadata_index` \
		WHERE original_index_id IN (:originalIndexIds);
		
		
sql.delete_backup_by_id = \
	DELETE FROM `backup_metadata_index` WHERE `id` = :id;
	
sql.delete_backup_by_ids = \
	DELETE FROM `backup_metadata_index` WHERE `id` IN (:idList);
	
sql.get_backup_index_id = \
	SELECT `id` \
		FROM `backup_metadata_index` \
		WHERE `owner_id` = :ownerId AND `parent_id` = :parentId AND `name` = :name;
	
sql.unbackup_file = \
	UPDATE `backup_metadata_index` \
		SET `original_index_id` = '' \
		WHERE `original_index_id` = :originalIndexId;
		
sql.unbackup_files = \
	UPDATE `backup_metadata_index` \
		SET `original_index_id` = '' \
		WHERE `original_index_id` IN (:originalIndexIds);	
		
		
sql.batchunbackup_file = \
	UPDATE `backup_metadata_index` \
		SET `original_index_id` = '' \
		WHERE `original_index_id` IN (:ids);
		
sql.get_all_unbackup_metadatas =\
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`original_index_id` = '' AND m.`owner_id` = :ownerId;
		
sql.get_unbackup_metadatas =\
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`parent_id` = :parentId AND m.`owner_id` = :ownerId AND m.`original_index_id` = '';

sql.get_sub_folder = \
	SELECT `id`, `parent_id`, `name`, `is_folder` AS `folder`, `sort_priority`, `size`, `origin_name`, `modified_at`, `modified_by`, \
			`device_uid`, `link_path` AS `full_source_path`, `note`, `params`, `icon_block_id`, `is_encrypted` AS `encrypted`, `created_at`, `created_by`, \
			`block_id`, `type`, `owner_id`, `original_index_id`, `backup_no`, `is_visible` AS `visible` \
		FROM `backup_metadata_index` \
		WHERE `parent_id` = :parentId AND `is_folder` = 1;

sql.get_backup_sub_by_parent_ids_and_names = \
	SELECT `id`, `parent_id`, `name`, `is_folder` AS `folder`, `sort_priority`, `size`, `origin_name`, `modified_at`, `modified_by`, \
			`device_uid`, `link_path` AS `full_source_path`, `note`, `params`, `icon_block_id`, `is_encrypted` AS `encrypted`, `created_at`, `created_by`, \
			`block_id`, `type`, `owner_id`, `original_index_id`, `backup_no`, `is_visible` AS `visible` \
		FROM `backup_metadata_index` \
		WHERE `owner_id` = :ownerId AND `parent_id` IN ( :parentIds ) \
		AND (`name` IN (:names) OR :names IS NULL);
		
sql.exist_backup_name = \
	SELECT `id`, `parent_id`, `name`, `is_folder` AS `folder`, `sort_priority`, `size`, `origin_name`, `modified_at`, `modified_by`, \
			`device_uid`, `link_path` AS `full_source_path`, `note`, `params`, `icon_block_id`, `is_encrypted` AS `encrypted`, `created_at`, `created_by`, \
			`block_id`, `type`, `owner_id`, `original_index_id`, `backup_no`, `is_visible` AS `visible` \
		FROM `backup_metadata_index` \
		WHERE `parent_id` = :parentId AND `link_path` = :sourcePath AND `name` = :name;
		
sql.get_root_id = \
	SELECT `id` FROM `backup_metadata_index` WHERE `owner_id` = :ownerId AND `parent_id` = '';
	
sql.get_root = \
	SELECT  `id`, `parent_id`, `name`, `is_folder` AS `folder`, `sort_priority`, `size`, `origin_name`, `modified_at`, `modified_by`, \
			`device_uid`, `link_path` AS `full_source_path`, `note`, `params`, `icon_block_id`, `is_encrypted` AS `encrypted`, `created_at`, `created_by`, \
			`block_id`, `type`, `owner_id`, `original_index_id`, `backup_no`, `is_visible` AS `visible` \
		FROM `backup_metadata_index` WHERE `owner_id` = :ownerId AND `parent_id` = '';

sql.count_sub_backups_by_parent_id = \
	SELECT count(1) FROM backup_metadata_index WHERE parent_id = :parentId AND is_folder = :folder;

sql.get_latest_backup = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE m.`original_index_id` = :originalIndexId \
 		ORDER BY m.`backup_no` ASC LIMIT 1

sql.update_backup = \
	UPDATE `backup_metadata_index` \
		SET `parent_id` = :parentId, \
			`name` = :name, \
			`is_folder` = :folder, \
			`sort_priority` = :sortPriority, \
			`size` = :size,\
			`origin_name` = :originName, \
			`modified_at` = :modifiedAt, \
			`modified_by` = :modifiedBy,\
			`device_uid` = :deviceUid, \
			`link_path` = :fullSourcePath, \
			`note` = :note, \
			`params` = :params, \
			`icon_block_id` = :iconBlockId, \
			`is_encrypted` = :encrypted, \
			`created_at` = :createdAt, \
			`created_by` = :createdBy, \
			`block_id` = :blockId, \
			`type` = :type, \
			`owner_id` = :ownerId, \
			`original_index_id` = :originalIndexId, \
			`backup_no` = :backupNo, \
			`is_visible` = :visible \
		WHERE id = :id;

sql.clear_backup = \
	DELETE FROM `backup_metadata_index` \
		WHERE `owner_id` = :ownerId AND `original_index_id` = '' AND `type` = 'backup';
	
sql.update_backup_note = \
	UPDATE `backup_metadata_index` \
		SET `note` = :note, `modified_at` = :modifiedAt, `modified_by` = :modifiedBy \
		WHERE `id` = :id;	

sql.get_all_backup_metadatas_by_device_uid = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, miaa.`folders_count`, miaa.`files_count`, miaa.`total_size`, miaa.`width`, miaa.`height`, \
			m.`is_visible` AS `visible`, miaa.`collaborate_count`, miaa.`sync_root_count`, miaa.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` miaa ON (m.`id` = miaa.`metadata_index_id`) \
		WHERE m.`device_uid` = :deviceUid;

sql.rename_backup_link_folder = \
	UPDATE `backup_metadata_index` \
	SET `link_path` = CONCAT(:newFolderFullSourcePath, SUBSTRING(`link_path`, LENGTH(:oldFolderFullSourcePath) + 1, LENGTH(`link_path`))) \
	WHERE `link_path` = :oldFolderFullSourcePath OR `link_path` LIKE CONCAT(:oldFolderFullSourcePath, '/%');

sql.unbakcup_by_backup_count = \
    UPDATE `backup_metadata_index` \
       SET original_index_id = '' \
     WHERE original_index_id = :originalIndexId \
       AND backup_no > :backupCount;

sql.batch_unbakcup_by_id = \
    UPDATE `backup_metadata_index` \
       SET original_index_id = '' \
     WHERE id = :id;
     
sql.update_backup_file_encryption = \
	UPDATE `backup_metadata_index` \
		SET `block_id` = :blockId, `is_encrypted` = :encrypted, `modified_at` = :modifiedAt, `modified_by` = :modifiedBy \
		WHERE `id` = :id;
		
sql.get_backup_metadatas_by_searching_name_and_note = \
	SELECT m.`id`, m.`parent_id`, m.`name`, m.`is_folder` AS `folder`, m.`sort_priority`, m.`size`, m.`origin_name`, m.`modified_at`, m.`modified_by`, \
			m.`device_uid`, m.`link_path` AS `full_source_path`, m.`note`, m.`params`, m.`icon_block_id`, m.`is_encrypted` AS `encrypted`, m.`created_at`, m.`created_by`, \
			m.`block_id`, m.`type`, m.`owner_id`, m.`original_index_id`, m.`backup_no`, mat.`width`, mat.`height`, m.`is_visible` AS `visible`, \
			mat.`collaborate_count`, mat.`sync_root_count`, mat.`ref_link_count` \
		FROM `backup_metadata_index` m \
		LEFT JOIN `metadata_index_additional_attr` mat ON (m.`id` = mat.`metadata_index_id`) \
		WHERE (m.`name` LIKE CONCAT('%', :keyword, '%') OR m.`note` LIKE CONCAT('%', :keyword, '%')) \
		AND owner_id = :ownerId AND m.is_visible = 1;
		
sql.get_backup_metadatas_by_block_id = \
	SELECT bmi.`id`, bmi.`parent_id`, bmi.`origin_name`, bmi.`name`, bmi.`is_folder` as `folder`, bmi.`sort_priority`, bmi.`size`, bmi.`backup_no`, \
			bmi.`modified_at`, bmi.`modified_by`, bmi.`device_uid`, bmi.`link_path` AS `full_source_path`, bmi.`note`, bmi.`params`, \
			bmi.`icon_block_id`, bmi.`is_encrypted` as `encrypted`, bmi.`created_by`, bmi.`created_at`, bmi.`block_id`, bmi.`original_index_id`, \
			bmi.`type`, bmi.`owner_id`, bmi.`is_visible` AS `visible`, true AS `backup` \
		FROM `backup_metadata_index` bmi \
		WHERE bmi.`owner_id` = :ownerId AND bmi.`block_id` = :blockId AND bmi.`is_visible` = 1 AND  bmi.`original_index_id` != '';

sql.update_backup_as_link_file = \
	UPDATE `backup_metadata_index` SET `link_path` = :fullSourcePath, `device_uid` = :deviceUid WHERE `id` = :id;
