sql.create_collaborate_setting = \
	INSERT INTO collaborate SET metadata_index_id = :metadataId;
	
sql.batch_create_collaborate= \
    INSERT IGNORE INTO collaborate VALUES(:id,0);
	
sql.batch_update_collaborate= \
    UPDATE collaborate SET `is_delete`=1 WHERE metadata_index_id IN(:id);
	
	
sql.get_collaborate_metadata = \
	SELECT `id`, `parent_id`, `origin_name`, `name`, `is_folder` as `folder`, `sort_priority`, `size`, \
			`modified_at`, `modified_by`, `backup_count`, `device_uid`, `link_path` AS `full_source_path`, `note`, `params`, \
			`icon_block_id`, `is_encrypted` as `encrypted`, `created_by`, `created_at`, `block_id`, `shared_root_id`, \
			`type`, `owner_id` \
		FROM `metadata_index` ,`collaborate` \
		WHERE `metadata_index`.id = `collaborate`.metadata_index_id  \
			AND `metadata_index`.id = :metadataIndexId AND `metadata_index`.`owner_id` = :ownerId AND `collaborate`.is_delete = 0;
			
sql.get_collaborate_member_by_completed_cellphones = \
	SELECT cm.member_id, cm.metadata_index_id, cm.accepted, cm.mails, cm.nickname, cm.photo_block_id, cm.photo_size, cm.is_invited_by_sms, \
			cm.is_invited_by_mail, cm.invite_message \
		FROM collaborate_member cm \
		LEFT JOIN collaborate c ON (c.metadata_index_id = cm.metadata_index_id) \
		WHERE cm.metadata_index_id = :metadataIndexId AND cm.cellphones = :cellphones;
		
sql.get_collaborate_member_by_ambiguous_full_cellphones = \
	SELECT member_id, accepted, mails, nickname, photo_block_id, photo_size, is_invited_by_sms, is_invited_by_mail, invite_message \
		FROM collaborate_member \
		WHERE metadata_index_id = :metadataIndexId AND cellphones != '' AND CONCAT('/',cellphones, '/') LIKE CONCAT('%/', :cellphones, '/%') LIMIT 1;

sql.get_collaborate_members_by_fragment_cellphone = \
	SELECT cm.member_id, cm.metadata_index_id, cm.accepted, cm.mails, cm.nickname, cm.photo_block_id, cm.photo_size, cm.is_invited_by_sms, \
			cm.is_invited_by_mail, cm.invite_message \
		FROM collaborate_member cm \
		LEFT JOIN collaborate c ON (c.metadata_index_id = cm.metadata_index_id) \
		LEFT JOIN metadata_index mi ON (mi.id = cm.metadata_index_id) \
		WHERE CONCAT('/',cm.cellphones, '/') LIKE CONCAT('%/', :cellphone, '/%') AND c.is_delete = 0 AND (:includeInvisibleFolder = true OR mi.is_visible = 1) group by cm.metadata_index_id;

sql.get_collaborate_members = \
	SELECT cm.member_id, cm.metadata_index_id, cm.accepted, cm.mails, cm.nickname, cm.cellphones, cm.photo_block_id, \
	cm.photo_size, cm.is_invited_by_sms, cm.is_invited_by_mail, cm.invite_message  \
		FROM collaborate_member cm \
		LEFT JOIN collaborate c ON (c.metadata_index_id = cm.metadata_index_id) \
		WHERE cm.metadata_index_id = :metadataIndexId  AND c.is_delete = 0;

sql.create_collaborate_member = \
	INSERT INTO collaborate_member \
		SET metadata_index_id = :metadataIndexId, \
				mails = :mails, \
				nickname = :nickname, \
				cellphones = :cellphones, \
				photo_block_id = :photoBlockId, \
				photo_size = :photoSize, \
				is_invited_by_sms = 0, \
				is_invited_by_mail = 0, \
				invite_message = :inviteMessage;

sql.update_collaborate_member = \
	UPDATE collaborate_member SET \
					mails = :mails, \
					nickname = :nickname, \
					photo_block_id = :photoBlockId, \
					photo_size = :photoSize, \
					accepted = :accepted, \
					invite_message = :inviteMessage \
		WHERE metadata_index_id = :metadataIndexId AND cellphones = :cellphones;
	
sql.update_member_accepted = \
		UPDATE collaborate_member SET accepted = :accepted \
		WHERE metadata_index_id = :metadataIndexId AND cellphones != '' AND CONCAT('/', cellphones, '/') LIKE CONCAT('%/', :tempCellphone, '/%')
		
sql.get_metadata_info_by_member_id = \
	SELECT cm.member_id,cm.metadata_index_id,cm.accepted,cm.cellphones,cm.mails,cm.nickname, \
				  cm.photo_block_id,cm.photo_size,cm.is_invited_by_sms,cm.is_invited_by_mail,cm.invite_message \
		FROM collaborate_member cm \
		LEFT JOIN metadata_index mi ON (mi.id = cm.metadata_index_id)  \
		WHERE cm.member_id = :memberId;

sql.update_collaborate_member_invited_by_mail= \
UPDATE collaborate_member SET is_invited_by_mail = 1 WHERE member_id = :memberId;

sql.update_collaborate_member_metadata_index_id= \
UPDATE collaborate_member SET metadata_index_id = :targetId where \
     metadata_index_id=:sourceId;

sql.update_collaborate_member_invited_by_sms= \
	UPDATE collaborate_member SET is_invited_by_sms = 1 WHERE member_id = :memberId;

sql.update_collaborate_member_invited_by_sms_and_mail= \
UPDATE collaborate_member SET is_invited_by_sms = 1,is_invited_by_mail = 1 WHERE member_id = :memberId;

sql.delete_collaborate_member = \
	DELETE FROM collaborate_member WHERE member_id = :memberId;
	
sql.delete_collaborate = \
	UPDATE collaborate SET is_delete = 1 WHERE metadata_index_id = :metadataIndexId;

sql.delete_collaborate_for_db = \
	DELETE FROM collaborate WHERE metadata_index_id = :metadataIndexId;
	
sql.update_collaborate_member_photo= \
	UPDATE collaborate_member SET photo_block_id = :photoBlockId, photo_size = :photoSize WHERE member_id = :memberId;

sql.update_shared_root_id_to_null = \
	UPDATE `metadata_index` SET `shared_root_id` = '' WHERE `shared_root_id` = :sharedRootId; 

sql.update_invite_ptocessing_status = \
	REPLACE INTO `invite_processing_status` SET member_id = :memberId, invite_to = :inviteTo, `type` = :type, sms_sid = :smsSid, `status` = :status;

sql.get_invite_ptocessing_statuses = \
	SELECT member_id, invite_to, `type` as typeString, sms_sid, `status` \
	FROM `invite_processing_status` \
	WHERE member_id = :memberId;

